//  ===================================================================
//  This file is generated from an iso-3166 descrition
//  Do not edit by hand !
//  If more entries are needed write a new  xmlfile and run the tool
//  with both the basefile and the extras as arguments
//  ===================================================================

package iso3166;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
class Nationalities {
    private static HashMap<Integer, Country> codeMapping;
    private static HashMap<String, Country> stringMapping;

    public static Country getCountry(int Code) {
        if (codeMapping.containsKey(Code)) {
            return codeMapping.get(Code);
        } else {
            return codeMapping.get(0);
        }
    };

    public static Country getCountry(String Code) {
        if (stringMapping.containsKey(Code)) {
            return stringMapping.get(Code);
        } else {
            return codeMapping.get(0);
        }
    };

 public static Collection<Country> getNationalities() {
    return Collections.unmodifiableCollection(codeMapping.values());
 };
    static {
        codeMapping.put (4,new Country("Afghanistan", "AF", "AFG",  4, "ISO 3166-2:AF", "Asia", "Southern Asia", "",  142,  34,  0));
        codeMapping.put (8,new Country("Albania", "AL", "ALB",  8, "ISO 3166-2:AL", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (12,new Country("Algeria", "DZ", "DZA",  12, "ISO 3166-2:DZ", "Africa", "Northern Africa", "",  2,  15,  0));
        codeMapping.put (16,new Country("American Samoa", "AS", "ASM",  16, "ISO 3166-2:AS", "Oceania", "Polynesia", "",  9,  61,  0));
        codeMapping.put (20,new Country("Andorra", "AD", "AND",  20, "ISO 3166-2:AD", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (24,new Country("Angola", "AO", "AGO",  24, "ISO 3166-2:AO", "Africa", "Sub-Saharan Africa", "Middle Africa",  2,  202,  17));
        codeMapping.put (660,new Country("Anguilla", "AI", "AIA",  660, "ISO 3166-2:AI", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (10,new Country("Antarctica", "AQ", "ATA",  10, "ISO 3166-2:AQ", "", "", "",  0,  0,  0));
        codeMapping.put (28,new Country("Antigua and Barbuda", "AG", "ATG",  28, "ISO 3166-2:AG", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (32,new Country("Argentina", "AR", "ARG",  32, "ISO 3166-2:AR", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (51,new Country("Armenia", "AM", "ARM",  51, "ISO 3166-2:AM", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (533,new Country("Aruba", "AW", "ABW",  533, "ISO 3166-2:AW", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (36,new Country("Australia", "AU", "AUS",  36, "ISO 3166-2:AU", "Oceania", "Australia and New Zealand", "",  9,  53,  0));
        codeMapping.put (40,new Country("Austria", "AT", "AUT",  40, "ISO 3166-2:AT", "Europe", "Western Europe", "",  150,  155,  0));
        codeMapping.put (31,new Country("Azerbaijan", "AZ", "AZE",  31, "ISO 3166-2:AZ", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (44,new Country("Bahamas", "BS", "BHS",  44, "ISO 3166-2:BS", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (48,new Country("Bahrain", "BH", "BHR",  48, "ISO 3166-2:BH", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (50,new Country("Bangladesh", "BD", "BGD",  50, "ISO 3166-2:BD", "Asia", "Southern Asia", "",  142,  34,  0));
        codeMapping.put (52,new Country("Barbados", "BB", "BRB",  52, "ISO 3166-2:BB", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (112,new Country("Belarus", "BY", "BLR",  112, "ISO 3166-2:BY", "Europe", "Eastern Europe", "",  150,  151,  0));
        codeMapping.put (56,new Country("Belgium", "BE", "BEL",  56, "ISO 3166-2:BE", "Europe", "Western Europe", "",  150,  155,  0));
        codeMapping.put (84,new Country("Belize", "BZ", "BLZ",  84, "ISO 3166-2:BZ", "Americas", "Latin America and the Caribbean", "Central America",  19,  419,  13));
        codeMapping.put (204,new Country("Benin", "BJ", "BEN",  204, "ISO 3166-2:BJ", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (60,new Country("Bermuda", "BM", "BMU",  60, "ISO 3166-2:BM", "Americas", "Northern America", "",  19,  21,  0));
        codeMapping.put (64,new Country("Bhutan", "BT", "BTN",  64, "ISO 3166-2:BT", "Asia", "Southern Asia", "",  142,  34,  0));
        codeMapping.put (68,new Country("Bolivia (Plurinational State of)", "BO", "BOL",  68, "ISO 3166-2:BO", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (535,new Country("Bonaire, Sint Eustatius and Saba", "BQ", "BES",  535, "ISO 3166-2:BQ", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (70,new Country("Bosnia and Herzegovina", "BA", "BIH",  70, "ISO 3166-2:BA", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (72,new Country("Botswana", "BW", "BWA",  72, "ISO 3166-2:BW", "Africa", "Sub-Saharan Africa", "Southern Africa",  2,  202,  18));
        codeMapping.put (74,new Country("Bouvet Island", "BV", "BVT",  74, "ISO 3166-2:BV", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (76,new Country("Brazil", "BR", "BRA",  76, "ISO 3166-2:BR", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (86,new Country("British Indian Ocean Territory", "IO", "IOT",  86, "ISO 3166-2:IO", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (96,new Country("Brunei Darussalam", "BN", "BRN",  96, "ISO 3166-2:BN", "Asia", "South-eastern Asia", "",  142,  35,  0));
        codeMapping.put (100,new Country("Bulgaria", "BG", "BGR",  100, "ISO 3166-2:BG", "Europe", "Eastern Europe", "",  150,  151,  0));
        codeMapping.put (854,new Country("Burkina Faso", "BF", "BFA",  854, "ISO 3166-2:BF", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (108,new Country("Burundi", "BI", "BDI",  108, "ISO 3166-2:BI", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (132,new Country("Cabo Verde", "CV", "CPV",  132, "ISO 3166-2:CV", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (116,new Country("Cambodia", "KH", "KHM",  116, "ISO 3166-2:KH", "Asia", "South-eastern Asia", "",  142,  35,  0));
        codeMapping.put (120,new Country("Cameroon", "CM", "CMR",  120, "ISO 3166-2:CM", "Africa", "Sub-Saharan Africa", "Middle Africa",  2,  202,  17));
        codeMapping.put (124,new Country("Canada", "CA", "CAN",  124, "ISO 3166-2:CA", "Americas", "Northern America", "",  19,  21,  0));
        codeMapping.put (136,new Country("Cayman Islands", "KY", "CYM",  136, "ISO 3166-2:KY", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (140,new Country("Central African Republic", "CF", "CAF",  140, "ISO 3166-2:CF", "Africa", "Sub-Saharan Africa", "Middle Africa",  2,  202,  17));
        codeMapping.put (148,new Country("Chad", "TD", "TCD",  148, "ISO 3166-2:TD", "Africa", "Sub-Saharan Africa", "Middle Africa",  2,  202,  17));
        codeMapping.put (152,new Country("Chile", "CL", "CHL",  152, "ISO 3166-2:CL", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (156,new Country("China", "CN", "CHN",  156, "ISO 3166-2:CN", "Asia", "Eastern Asia", "",  142,  30,  0));
        codeMapping.put (162,new Country("Christmas Island", "CX", "CXR",  162, "ISO 3166-2:CX", "Oceania", "Australia and New Zealand", "",  9,  53,  0));
        codeMapping.put (166,new Country("Cocos (Keeling) Islands", "CC", "CCK",  166, "ISO 3166-2:CC", "Oceania", "Australia and New Zealand", "",  9,  53,  0));
        codeMapping.put (170,new Country("Colombia", "CO", "COL",  170, "ISO 3166-2:CO", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (174,new Country("Comoros", "KM", "COM",  174, "ISO 3166-2:KM", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (178,new Country("Congo", "CG", "COG",  178, "ISO 3166-2:CG", "Africa", "Sub-Saharan Africa", "Middle Africa",  2,  202,  17));
        codeMapping.put (180,new Country("Congo, Democratic Republic of the", "CD", "COD",  180, "ISO 3166-2:CD", "Africa", "Sub-Saharan Africa", "Middle Africa",  2,  202,  17));
        codeMapping.put (184,new Country("Cook Islands", "CK", "COK",  184, "ISO 3166-2:CK", "Oceania", "Polynesia", "",  9,  61,  0));
        codeMapping.put (188,new Country("Costa Rica", "CR", "CRI",  188, "ISO 3166-2:CR", "Americas", "Latin America and the Caribbean", "Central America",  19,  419,  13));
        codeMapping.put (191,new Country("Croatia", "HR", "HRV",  191, "ISO 3166-2:HR", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (192,new Country("Cuba", "CU", "CUB",  192, "ISO 3166-2:CU", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (531,new Country("Cura√ßao", "CW", "CUW",  531, "ISO 3166-2:CW", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (196,new Country("Cyprus", "CY", "CYP",  196, "ISO 3166-2:CY", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (203,new Country("Czechia", "CZ", "CZE",  203, "ISO 3166-2:CZ", "Europe", "Eastern Europe", "",  150,  151,  0));
        codeMapping.put (384,new Country("C√¥te d'Ivoire", "CI", "CIV",  384, "ISO 3166-2:CI", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (208,new Country("Denmark", "DK", "DNK",  208, "ISO 3166-2:DK", "Europe", "Northern Europe", "",  150,  154,  0));
        codeMapping.put (262,new Country("Djibouti", "DJ", "DJI",  262, "ISO 3166-2:DJ", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (212,new Country("Dominica", "DM", "DMA",  212, "ISO 3166-2:DM", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (214,new Country("Dominican Republic", "DO", "DOM",  214, "ISO 3166-2:DO", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (218,new Country("Ecuador", "EC", "ECU",  218, "ISO 3166-2:EC", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (818,new Country("Egypt", "EG", "EGY",  818, "ISO 3166-2:EG", "Africa", "Northern Africa", "",  2,  15,  0));
        codeMapping.put (222,new Country("El Salvador", "SV", "SLV",  222, "ISO 3166-2:SV", "Americas", "Latin America and the Caribbean", "Central America",  19,  419,  13));
        codeMapping.put (226,new Country("Equatorial Guinea", "GQ", "GNQ",  226, "ISO 3166-2:GQ", "Africa", "Sub-Saharan Africa", "Middle Africa",  2,  202,  17));
        codeMapping.put (232,new Country("Eritrea", "ER", "ERI",  232, "ISO 3166-2:ER", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (233,new Country("Estonia", "EE", "EST",  233, "ISO 3166-2:EE", "Europe", "Northern Europe", "",  150,  154,  0));
        codeMapping.put (748,new Country("Eswatini", "SZ", "SWZ",  748, "ISO 3166-2:SZ", "Africa", "Sub-Saharan Africa", "Southern Africa",  2,  202,  18));
        codeMapping.put (231,new Country("Ethiopia", "ET", "ETH",  231, "ISO 3166-2:ET", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (238,new Country("Falkland Islands (Malvinas)", "FK", "FLK",  238, "ISO 3166-2:FK", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (234,new Country("Faroe Islands", "FO", "FRO",  234, "ISO 3166-2:FO", "Europe", "Northern Europe", "",  150,  154,  0));
        codeMapping.put (242,new Country("Fiji", "FJ", "FJI",  242, "ISO 3166-2:FJ", "Oceania", "Melanesia", "",  9,  54,  0));
        codeMapping.put (246,new Country("Finland", "FI", "FIN",  246, "ISO 3166-2:FI", "Europe", "Northern Europe", "",  150,  154,  0));
        codeMapping.put (250,new Country("France", "FR", "FRA",  250, "ISO 3166-2:FR", "Europe", "Western Europe", "",  150,  155,  0));
        codeMapping.put (254,new Country("French Guiana", "GF", "GUF",  254, "ISO 3166-2:GF", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (258,new Country("French Polynesia", "PF", "PYF",  258, "ISO 3166-2:PF", "Oceania", "Polynesia", "",  9,  61,  0));
        codeMapping.put (260,new Country("French Southern Territories", "TF", "ATF",  260, "ISO 3166-2:TF", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (266,new Country("Gabon", "GA", "GAB",  266, "ISO 3166-2:GA", "Africa", "Sub-Saharan Africa", "Middle Africa",  2,  202,  17));
        codeMapping.put (270,new Country("Gambia", "GM", "GMB",  270, "ISO 3166-2:GM", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (268,new Country("Georgia", "GE", "GEO",  268, "ISO 3166-2:GE", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (276,new Country("Germany", "DE", "DEU",  276, "ISO 3166-2:DE", "Europe", "Western Europe", "",  150,  155,  0));
        codeMapping.put (288,new Country("Ghana", "GH", "GHA",  288, "ISO 3166-2:GH", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (292,new Country("Gibraltar", "GI", "GIB",  292, "ISO 3166-2:GI", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (300,new Country("Greece", "GR", "GRC",  300, "ISO 3166-2:GR", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (304,new Country("Greenland", "GL", "GRL",  304, "ISO 3166-2:GL", "Americas", "Northern America", "",  19,  21,  0));
        codeMapping.put (308,new Country("Grenada", "GD", "GRD",  308, "ISO 3166-2:GD", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (312,new Country("Guadeloupe", "GP", "GLP",  312, "ISO 3166-2:GP", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (316,new Country("Guam", "GU", "GUM",  316, "ISO 3166-2:GU", "Oceania", "Micronesia", "",  9,  57,  0));
        codeMapping.put (320,new Country("Guatemala", "GT", "GTM",  320, "ISO 3166-2:GT", "Americas", "Latin America and the Caribbean", "Central America",  19,  419,  13));
        codeMapping.put (831,new Country("Guernsey", "GG", "GGY",  831, "ISO 3166-2:GG", "Europe", "Northern Europe", "Channel Islands",  150,  154,  830));
        codeMapping.put (324,new Country("Guinea", "GN", "GIN",  324, "ISO 3166-2:GN", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (624,new Country("Guinea-Bissau", "GW", "GNB",  624, "ISO 3166-2:GW", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (328,new Country("Guyana", "GY", "GUY",  328, "ISO 3166-2:GY", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (332,new Country("Haiti", "HT", "HTI",  332, "ISO 3166-2:HT", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (334,new Country("Heard Island and McDonald Islands", "HM", "HMD",  334, "ISO 3166-2:HM", "Oceania", "Australia and New Zealand", "",  9,  53,  0));
        codeMapping.put (336,new Country("Holy See", "VA", "VAT",  336, "ISO 3166-2:VA", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (340,new Country("Honduras", "HN", "HND",  340, "ISO 3166-2:HN", "Americas", "Latin America and the Caribbean", "Central America",  19,  419,  13));
        codeMapping.put (344,new Country("Hong Kong", "HK", "HKG",  344, "ISO 3166-2:HK", "Asia", "Eastern Asia", "",  142,  30,  0));
        codeMapping.put (348,new Country("Hungary", "HU", "HUN",  348, "ISO 3166-2:HU", "Europe", "Eastern Europe", "",  150,  151,  0));
        codeMapping.put (352,new Country("Iceland", "IS", "ISL",  352, "ISO 3166-2:IS", "Europe", "Northern Europe", "",  150,  154,  0));
        codeMapping.put (356,new Country("India", "IN", "IND",  356, "ISO 3166-2:IN", "Asia", "Southern Asia", "",  142,  34,  0));
        codeMapping.put (360,new Country("Indonesia", "ID", "IDN",  360, "ISO 3166-2:ID", "Asia", "South-eastern Asia", "",  142,  35,  0));
        codeMapping.put (364,new Country("Iran (Islamic Republic of)", "IR", "IRN",  364, "ISO 3166-2:IR", "Asia", "Southern Asia", "",  142,  34,  0));
        codeMapping.put (368,new Country("Iraq", "IQ", "IRQ",  368, "ISO 3166-2:IQ", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (372,new Country("Ireland", "IE", "IRL",  372, "ISO 3166-2:IE", "Europe", "Northern Europe", "",  150,  154,  0));
        codeMapping.put (833,new Country("Isle of Man", "IM", "IMN",  833, "ISO 3166-2:IM", "Europe", "Northern Europe", "",  150,  154,  0));
        codeMapping.put (376,new Country("Israel", "IL", "ISR",  376, "ISO 3166-2:IL", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (380,new Country("Italy", "IT", "ITA",  380, "ISO 3166-2:IT", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (388,new Country("Jamaica", "JM", "JAM",  388, "ISO 3166-2:JM", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (392,new Country("Japan", "JP", "JPN",  392, "ISO 3166-2:JP", "Asia", "Eastern Asia", "",  142,  30,  0));
        codeMapping.put (832,new Country("Jersey", "JE", "JEY",  832, "ISO 3166-2:JE", "Europe", "Northern Europe", "Channel Islands",  150,  154,  830));
        codeMapping.put (400,new Country("Jordan", "JO", "JOR",  400, "ISO 3166-2:JO", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (398,new Country("Kazakhstan", "KZ", "KAZ",  398, "ISO 3166-2:KZ", "Asia", "Central Asia", "",  142,  143,  0));
        codeMapping.put (404,new Country("Kenya", "KE", "KEN",  404, "ISO 3166-2:KE", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (296,new Country("Kiribati", "KI", "KIR",  296, "ISO 3166-2:KI", "Oceania", "Micronesia", "",  9,  57,  0));
        codeMapping.put (408,new Country("Korea (Democratic People's Republic of)", "KP", "PRK",  408, "ISO 3166-2:KP", "Asia", "Eastern Asia", "",  142,  30,  0));
        codeMapping.put (410,new Country("Korea, Republic of", "KR", "KOR",  410, "ISO 3166-2:KR", "Asia", "Eastern Asia", "",  142,  30,  0));
        codeMapping.put (414,new Country("Kuwait", "KW", "KWT",  414, "ISO 3166-2:KW", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (417,new Country("Kyrgyzstan", "KG", "KGZ",  417, "ISO 3166-2:KG", "Asia", "Central Asia", "",  142,  143,  0));
        codeMapping.put (418,new Country("Lao People's Democratic Republic", "LA", "LAO",  418, "ISO 3166-2:LA", "Asia", "South-eastern Asia", "",  142,  35,  0));
        codeMapping.put (428,new Country("Latvia", "LV", "LVA",  428, "ISO 3166-2:LV", "Europe", "Northern Europe", "",  150,  154,  0));
        codeMapping.put (422,new Country("Lebanon", "LB", "LBN",  422, "ISO 3166-2:LB", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (426,new Country("Lesotho", "LS", "LSO",  426, "ISO 3166-2:LS", "Africa", "Sub-Saharan Africa", "Southern Africa",  2,  202,  18));
        codeMapping.put (430,new Country("Liberia", "LR", "LBR",  430, "ISO 3166-2:LR", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (434,new Country("Libya", "LY", "LBY",  434, "ISO 3166-2:LY", "Africa", "Northern Africa", "",  2,  15,  0));
        codeMapping.put (438,new Country("Liechtenstein", "LI", "LIE",  438, "ISO 3166-2:LI", "Europe", "Western Europe", "",  150,  155,  0));
        codeMapping.put (440,new Country("Lithuania", "LT", "LTU",  440, "ISO 3166-2:LT", "Europe", "Northern Europe", "",  150,  154,  0));
        codeMapping.put (442,new Country("Luxembourg", "LU", "LUX",  442, "ISO 3166-2:LU", "Europe", "Western Europe", "",  150,  155,  0));
        codeMapping.put (446,new Country("Macao", "MO", "MAC",  446, "ISO 3166-2:MO", "Asia", "Eastern Asia", "",  142,  30,  0));
        codeMapping.put (450,new Country("Madagascar", "MG", "MDG",  450, "ISO 3166-2:MG", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (454,new Country("Malawi", "MW", "MWI",  454, "ISO 3166-2:MW", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (458,new Country("Malaysia", "MY", "MYS",  458, "ISO 3166-2:MY", "Asia", "South-eastern Asia", "",  142,  35,  0));
        codeMapping.put (462,new Country("Maldives", "MV", "MDV",  462, "ISO 3166-2:MV", "Asia", "Southern Asia", "",  142,  34,  0));
        codeMapping.put (466,new Country("Mali", "ML", "MLI",  466, "ISO 3166-2:ML", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (470,new Country("Malta", "MT", "MLT",  470, "ISO 3166-2:MT", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (584,new Country("Marshall Islands", "MH", "MHL",  584, "ISO 3166-2:MH", "Oceania", "Micronesia", "",  9,  57,  0));
        codeMapping.put (474,new Country("Martinique", "MQ", "MTQ",  474, "ISO 3166-2:MQ", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (478,new Country("Mauritania", "MR", "MRT",  478, "ISO 3166-2:MR", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (480,new Country("Mauritius", "MU", "MUS",  480, "ISO 3166-2:MU", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (175,new Country("Mayotte", "YT", "MYT",  175, "ISO 3166-2:YT", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (484,new Country("Mexico", "MX", "MEX",  484, "ISO 3166-2:MX", "Americas", "Latin America and the Caribbean", "Central America",  19,  419,  13));
        codeMapping.put (583,new Country("Micronesia (Federated States of)", "FM", "FSM",  583, "ISO 3166-2:FM", "Oceania", "Micronesia", "",  9,  57,  0));
        codeMapping.put (498,new Country("Moldova, Republic of", "MD", "MDA",  498, "ISO 3166-2:MD", "Europe", "Eastern Europe", "",  150,  151,  0));
        codeMapping.put (492,new Country("Monaco", "MC", "MCO",  492, "ISO 3166-2:MC", "Europe", "Western Europe", "",  150,  155,  0));
        codeMapping.put (496,new Country("Mongolia", "MN", "MNG",  496, "ISO 3166-2:MN", "Asia", "Eastern Asia", "",  142,  30,  0));
        codeMapping.put (499,new Country("Montenegro", "ME", "MNE",  499, "ISO 3166-2:ME", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (500,new Country("Montserrat", "MS", "MSR",  500, "ISO 3166-2:MS", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (504,new Country("Morocco", "MA", "MAR",  504, "ISO 3166-2:MA", "Africa", "Northern Africa", "",  2,  15,  0));
        codeMapping.put (508,new Country("Mozambique", "MZ", "MOZ",  508, "ISO 3166-2:MZ", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (104,new Country("Myanmar", "MM", "MMR",  104, "ISO 3166-2:MM", "Asia", "South-eastern Asia", "",  142,  35,  0));
        codeMapping.put (516,new Country("Namibia", "NA", "NAM",  516, "ISO 3166-2:NA", "Africa", "Sub-Saharan Africa", "Southern Africa",  2,  202,  18));
        codeMapping.put (520,new Country("Nauru", "NR", "NRU",  520, "ISO 3166-2:NR", "Oceania", "Micronesia", "",  9,  57,  0));
        codeMapping.put (524,new Country("Nepal", "NP", "NPL",  524, "ISO 3166-2:NP", "Asia", "Southern Asia", "",  142,  34,  0));
        codeMapping.put (528,new Country("Netherlands", "NL", "NLD",  528, "ISO 3166-2:NL", "Europe", "Western Europe", "",  150,  155,  0));
        codeMapping.put (540,new Country("New Caledonia", "NC", "NCL",  540, "ISO 3166-2:NC", "Oceania", "Melanesia", "",  9,  54,  0));
        codeMapping.put (554,new Country("New Zealand", "NZ", "NZL",  554, "ISO 3166-2:NZ", "Oceania", "Australia and New Zealand", "",  9,  53,  0));
        codeMapping.put (558,new Country("Nicaragua", "NI", "NIC",  558, "ISO 3166-2:NI", "Americas", "Latin America and the Caribbean", "Central America",  19,  419,  13));
        codeMapping.put (562,new Country("Niger", "NE", "NER",  562, "ISO 3166-2:NE", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (566,new Country("Nigeria", "NG", "NGA",  566, "ISO 3166-2:NG", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (570,new Country("Niue", "NU", "NIU",  570, "ISO 3166-2:NU", "Oceania", "Polynesia", "",  9,  61,  0));
        codeMapping.put (574,new Country("Norfolk Island", "NF", "NFK",  574, "ISO 3166-2:NF", "Oceania", "Australia and New Zealand", "",  9,  53,  0));
        codeMapping.put (807,new Country("North Macedonia", "MK", "MKD",  807, "ISO 3166-2:MK", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (580,new Country("Northern Mariana Islands", "MP", "MNP",  580, "ISO 3166-2:MP", "Oceania", "Micronesia", "",  9,  57,  0));
        codeMapping.put (578,new Country("Norway", "NO", "NOR",  578, "ISO 3166-2:NO", "Europe", "Northern Europe", "",  150,  154,  0));
        codeMapping.put (512,new Country("Oman", "OM", "OMN",  512, "ISO 3166-2:OM", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (586,new Country("Pakistan", "PK", "PAK",  586, "ISO 3166-2:PK", "Asia", "Southern Asia", "",  142,  34,  0));
        codeMapping.put (585,new Country("Palau", "PW", "PLW",  585, "ISO 3166-2:PW", "Oceania", "Micronesia", "",  9,  57,  0));
        codeMapping.put (275,new Country("Palestine, State of", "PS", "PSE",  275, "ISO 3166-2:PS", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (591,new Country("Panama", "PA", "PAN",  591, "ISO 3166-2:PA", "Americas", "Latin America and the Caribbean", "Central America",  19,  419,  13));
        codeMapping.put (598,new Country("Papua New Guinea", "PG", "PNG",  598, "ISO 3166-2:PG", "Oceania", "Melanesia", "",  9,  54,  0));
        codeMapping.put (600,new Country("Paraguay", "PY", "PRY",  600, "ISO 3166-2:PY", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (604,new Country("Peru", "PE", "PER",  604, "ISO 3166-2:PE", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (608,new Country("Philippines", "PH", "PHL",  608, "ISO 3166-2:PH", "Asia", "South-eastern Asia", "",  142,  35,  0));
        codeMapping.put (612,new Country("Pitcairn", "PN", "PCN",  612, "ISO 3166-2:PN", "Oceania", "Polynesia", "",  9,  61,  0));
        codeMapping.put (616,new Country("Poland", "PL", "POL",  616, "ISO 3166-2:PL", "Europe", "Eastern Europe", "",  150,  151,  0));
        codeMapping.put (620,new Country("Portugal", "PT", "PRT",  620, "ISO 3166-2:PT", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (630,new Country("Puerto Rico", "PR", "PRI",  630, "ISO 3166-2:PR", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (634,new Country("Qatar", "QA", "QAT",  634, "ISO 3166-2:QA", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (642,new Country("Romania", "RO", "ROU",  642, "ISO 3166-2:RO", "Europe", "Eastern Europe", "",  150,  151,  0));
        codeMapping.put (643,new Country("Russian Federation", "RU", "RUS",  643, "ISO 3166-2:RU", "Europe", "Eastern Europe", "",  150,  151,  0));
        codeMapping.put (646,new Country("Rwanda", "RW", "RWA",  646, "ISO 3166-2:RW", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (638,new Country("R√©union", "RE", "REU",  638, "ISO 3166-2:RE", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (652,new Country("Saint Barth√©lemy", "BL", "BLM",  652, "ISO 3166-2:BL", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (654,new Country("Saint Helena, Ascension and Tristan da Cunha", "SH", "SHN",  654, "ISO 3166-2:SH", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (659,new Country("Saint Kitts and Nevis", "KN", "KNA",  659, "ISO 3166-2:KN", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (662,new Country("Saint Lucia", "LC", "LCA",  662, "ISO 3166-2:LC", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (663,new Country("Saint Martin (French part)", "MF", "MAF",  663, "ISO 3166-2:MF", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (666,new Country("Saint Pierre and Miquelon", "PM", "SPM",  666, "ISO 3166-2:PM", "Americas", "Northern America", "",  19,  21,  0));
        codeMapping.put (670,new Country("Saint Vincent and the Grenadines", "VC", "VCT",  670, "ISO 3166-2:VC", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (882,new Country("Samoa", "WS", "WSM",  882, "ISO 3166-2:WS", "Oceania", "Polynesia", "",  9,  61,  0));
        codeMapping.put (674,new Country("San Marino", "SM", "SMR",  674, "ISO 3166-2:SM", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (678,new Country("Sao Tome and Principe", "ST", "STP",  678, "ISO 3166-2:ST", "Africa", "Sub-Saharan Africa", "Middle Africa",  2,  202,  17));
        codeMapping.put (682,new Country("Saudi Arabia", "SA", "SAU",  682, "ISO 3166-2:SA", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (686,new Country("Senegal", "SN", "SEN",  686, "ISO 3166-2:SN", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (688,new Country("Serbia", "RS", "SRB",  688, "ISO 3166-2:RS", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (690,new Country("Seychelles", "SC", "SYC",  690, "ISO 3166-2:SC", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (694,new Country("Sierra Leone", "SL", "SLE",  694, "ISO 3166-2:SL", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (702,new Country("Singapore", "SG", "SGP",  702, "ISO 3166-2:SG", "Asia", "South-eastern Asia", "",  142,  35,  0));
        codeMapping.put (534,new Country("Sint Maarten (Dutch part)", "SX", "SXM",  534, "ISO 3166-2:SX", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (703,new Country("Slovakia", "SK", "SVK",  703, "ISO 3166-2:SK", "Europe", "Eastern Europe", "",  150,  151,  0));
        codeMapping.put (705,new Country("Slovenia", "SI", "SVN",  705, "ISO 3166-2:SI", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (90,new Country("Solomon Islands", "SB", "SLB",  90, "ISO 3166-2:SB", "Oceania", "Melanesia", "",  9,  54,  0));
        codeMapping.put (706,new Country("Somalia", "SO", "SOM",  706, "ISO 3166-2:SO", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (710,new Country("South Africa", "ZA", "ZAF",  710, "ISO 3166-2:ZA", "Africa", "Sub-Saharan Africa", "Southern Africa",  2,  202,  18));
        codeMapping.put (239,new Country("South Georgia and the South Sandwich Islands", "GS", "SGS",  239, "ISO 3166-2:GS", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (728,new Country("South Sudan", "SS", "SSD",  728, "ISO 3166-2:SS", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (724,new Country("Spain", "ES", "ESP",  724, "ISO 3166-2:ES", "Europe", "Southern Europe", "",  150,  39,  0));
        codeMapping.put (144,new Country("Sri Lanka", "LK", "LKA",  144, "ISO 3166-2:LK", "Asia", "Southern Asia", "",  142,  34,  0));
        codeMapping.put (729,new Country("Sudan", "SD", "SDN",  729, "ISO 3166-2:SD", "Africa", "Northern Africa", "",  2,  15,  0));
        codeMapping.put (740,new Country("Suriname", "SR", "SUR",  740, "ISO 3166-2:SR", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (744,new Country("Svalbard and Jan Mayen", "SJ", "SJM",  744, "ISO 3166-2:SJ", "Europe", "Northern Europe", "",  150,  154,  0));
        codeMapping.put (752,new Country("Sweden", "SE", "SWE",  752, "ISO 3166-2:SE", "Europe", "Northern Europe", "",  150,  154,  0));
        codeMapping.put (756,new Country("Switzerland", "CH", "CHE",  756, "ISO 3166-2:CH", "Europe", "Western Europe", "",  150,  155,  0));
        codeMapping.put (760,new Country("Syrian Arab Republic", "SY", "SYR",  760, "ISO 3166-2:SY", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (158,new Country("Taiwan, Province of China", "TW", "TWN",  158, "ISO 3166-2:TW", "Asia", "Eastern Asia", "",  142,  30,  0));
        codeMapping.put (762,new Country("Tajikistan", "TJ", "TJK",  762, "ISO 3166-2:TJ", "Asia", "Central Asia", "",  142,  143,  0));
        codeMapping.put (834,new Country("Tanzania, United Republic of", "TZ", "TZA",  834, "ISO 3166-2:TZ", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (764,new Country("Thailand", "TH", "THA",  764, "ISO 3166-2:TH", "Asia", "South-eastern Asia", "",  142,  35,  0));
        codeMapping.put (626,new Country("Timor-Leste", "TL", "TLS",  626, "ISO 3166-2:TL", "Asia", "South-eastern Asia", "",  142,  35,  0));
        codeMapping.put (768,new Country("Togo", "TG", "TGO",  768, "ISO 3166-2:TG", "Africa", "Sub-Saharan Africa", "Western Africa",  2,  202,  11));
        codeMapping.put (772,new Country("Tokelau", "TK", "TKL",  772, "ISO 3166-2:TK", "Oceania", "Polynesia", "",  9,  61,  0));
        codeMapping.put (776,new Country("Tonga", "TO", "TON",  776, "ISO 3166-2:TO", "Oceania", "Polynesia", "",  9,  61,  0));
        codeMapping.put (780,new Country("Trinidad and Tobago", "TT", "TTO",  780, "ISO 3166-2:TT", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (788,new Country("Tunisia", "TN", "TUN",  788, "ISO 3166-2:TN", "Africa", "Northern Africa", "",  2,  15,  0));
        codeMapping.put (792,new Country("Turkey", "TR", "TUR",  792, "ISO 3166-2:TR", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (795,new Country("Turkmenistan", "TM", "TKM",  795, "ISO 3166-2:TM", "Asia", "Central Asia", "",  142,  143,  0));
        codeMapping.put (796,new Country("Turks and Caicos Islands", "TC", "TCA",  796, "ISO 3166-2:TC", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (798,new Country("Tuvalu", "TV", "TUV",  798, "ISO 3166-2:TV", "Oceania", "Polynesia", "",  9,  61,  0));
        codeMapping.put (800,new Country("Uganda", "UG", "UGA",  800, "ISO 3166-2:UG", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (804,new Country("Ukraine", "UA", "UKR",  804, "ISO 3166-2:UA", "Europe", "Eastern Europe", "",  150,  151,  0));
        codeMapping.put (0,new Country("<Undefined>", "<Undefined>", "<Undefined>",  0, "<Undefined>", "<Undefined>", "<Undefined>", "<Undefined>",  0,  0,  0));
        codeMapping.put (784,new Country("United Arab Emirates", "AE", "ARE",  784, "ISO 3166-2:AE", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (826,new Country("United Kingdom of Great Britain and Northern Ireland", "GB", "GBR",  826, "ISO 3166-2:GB", "Europe", "Northern Europe", "",  150,  154,  0));
        codeMapping.put (581,new Country("United States Minor Outlying Islands", "UM", "UMI",  581, "ISO 3166-2:UM", "Oceania", "Micronesia", "",  9,  57,  0));
        codeMapping.put (840,new Country("United States of America", "US", "USA",  840, "ISO 3166-2:US", "Americas", "Northern America", "",  19,  21,  0));
        codeMapping.put (858,new Country("Uruguay", "UY", "URY",  858, "ISO 3166-2:UY", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (860,new Country("Uzbekistan", "UZ", "UZB",  860, "ISO 3166-2:UZ", "Asia", "Central Asia", "",  142,  143,  0));
        codeMapping.put (548,new Country("Vanuatu", "VU", "VUT",  548, "ISO 3166-2:VU", "Oceania", "Melanesia", "",  9,  54,  0));
        codeMapping.put (862,new Country("Venezuela (Bolivarian Republic of)", "VE", "VEN",  862, "ISO 3166-2:VE", "Americas", "Latin America and the Caribbean", "South America",  19,  419,  5));
        codeMapping.put (704,new Country("Viet Nam", "VN", "VNM",  704, "ISO 3166-2:VN", "Asia", "South-eastern Asia", "",  142,  35,  0));
        codeMapping.put (92,new Country("Virgin Islands (British)", "VG", "VGB",  92, "ISO 3166-2:VG", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (850,new Country("Virgin Islands (U.S.)", "VI", "VIR",  850, "ISO 3166-2:VI", "Americas", "Latin America and the Caribbean", "Caribbean",  19,  419,  29));
        codeMapping.put (876,new Country("Wallis and Futuna", "WF", "WLF",  876, "ISO 3166-2:WF", "Oceania", "Polynesia", "",  9,  61,  0));
        codeMapping.put (732,new Country("Western Sahara", "EH", "ESH",  732, "ISO 3166-2:EH", "Africa", "Northern Africa", "",  2,  15,  0));
        codeMapping.put (887,new Country("Yemen", "YE", "YEM",  887, "ISO 3166-2:YE", "Asia", "Western Asia", "",  142,  145,  0));
        codeMapping.put (894,new Country("Zambia", "ZM", "ZMB",  894, "ISO 3166-2:ZM", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (716,new Country("Zimbabwe", "ZW", "ZWE",  716, "ISO 3166-2:ZW", "Africa", "Sub-Saharan Africa", "Eastern Africa",  2,  202,  14));
        codeMapping.put (248,new Country("√Öland Islands", "AX", "ALA",  248, "ISO 3166-2:AX", "Europe", "Northern Europe", "",  150,  154,  0));

      for (java.util.Map.Entry<Integer, Country> entry : codeMapping.entrySet()) {
         Country value = entry.getValue();
         stringMapping.put(value.Alpha_2,value);
         stringMapping.put(value.Alpha_3,value);
         stringMapping.put(value.Name,value);
         stringMapping.put(value.Iso_3166_2,value);
         };
    };
};
